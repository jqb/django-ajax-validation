=====
Usage
=====

To use, Ajax Validation requires only that you add a URL(one per form), and some javascript to any page with the form.

For example, if you had the following form::

    from django import forms

    class ContactForm(forms.Form):
        name = forms.CharField(label='Your Name')
        email = forms.EmailField(label='Your Email')
        message = forms.CharField(label='Your Message', widget=forms.Textarea)


You would need to add the following url to your urls.py(you also need to import the form class)::

    (r'^SOME/URL/$', 'ajax_validation.views.validate', {'form_class': ContactForm}, 'contact_form_validate')


The URL can take any arguments(named, or unamed), and you can also provide a
callback function, this function is given request, \*args, and \*\*kwargs and
should return a dictionary which is passed to the form constructor.

And then in the template in which you are displaying the form, you should add::

    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.js"></script>
    {% load jquery_validation %}
    {% include_validation %}
    <script type="text/javascript">
        $(function()    {
            $('#form').validate('{% url contact_form_validate %}', {type: 'ul', fields: ['email'], dom: $('#id_email'), event: 'keyup'});
            $('#form').validate('{% url contact_form_validate %}', {type: 'ul', fields: ['email'], dom: $('#id_email'), event: 'keyup'});
            $('#form').validate('{% url contact_form_validate %}', {type: 'ul', event: 'keyup', untilCurrent: true});
        });
    </script>

As you can see, you need to have jQuery for this to work(here it is being loaded
from google).  In the javascript you use jQuery's selectors to select where the
form is, and the validate method takes 5 parameters, all optional, first is the
URL of the validation, here we reverse the URL we set up earlier.  The second
parameter is a dictionary, it is optional and should either provide type(ul,
table, or p), this is the type of renderer you used for django's forms(form.as_p,
etc.), the default is table if nothing is provided.  It can also take a callback
option which is a function that recieves data, which is the JSON representation
of any errors, and form, which is the jquery object that you provided.  Finally,
it takes fields, which is a list of the fields that should be validated, it will
not display errors that aren't in that list of fields.  The last 2 options are
dom and event, these allow you to choose when the validation will occur, dom
should be a jQuery object(i.e.: $('#my_field')), and event should be a jQuery
event(listed `here`_).

.. _here: http://docs.jquery.com/Events/bind#overview

In addition you can provide a callable option, ``submitHandler``.  This
recieves the form DOM object and can do whatever it pleases.  If it returns
true the form will be submitted, else it won't.

Using ``ajax-validation`` with ``django-uniform``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to use ``django-ajax-validation`` with ``django-uniform`` there is
an extra included handler that works with it.  To use it simply include the
``jquery-uni-form.js`` file in your template and pass
``callback: uniform_callback`` to ``jQuery.validate``.



Using ``ajax-validation`` ModelValidationView classes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you'd like to use ``ajax-validation`` with models and ModelForm's
check the ModelValidationView class. Here's how it work's:


In your views.py file ::

   from myapp.models import Car
   from myapp.forms import SpecialCarForm
   from ajax_validation import site as ajax_validation_site


   ajax_validation_site.register(Car)

   # or:

   class CarValidationView(ModelValidationView):
       form_class = SpecialCarForm
   ajax_validation_site.register(Car, CarValidationView)



And then in your main urls.py file ::
   import ajax_validation
   ajax_validation.autodiscover()


   urlpatterns = patterns(
       '',
       # ...

       (r'^validate/', include(validation.site.urls)),

       # ....
   )


The ajax_validation site creates urls and urls-names for you::
   url  : r'^app_name/model_name/(<optional_object_pk>)?'
   name : 'validate-app_name-model_name'


so for the car example we have ::
   url  : r'^myapp/car/'    # for creating new Car object
          r'^myapp/car/1'   # for edit existing Car object with id = 1

   name : 'validate-myapp-car'
